/*
 * Copyright © 2017-2020 WireGuard LLC.
 * Copyright © 2018-2020 Harsh Shandilya <msfjarvis@gmail.com>. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import dev.msfjarvis.buildsrc.Libs
import dev.msfjarvis.buildsrc.ProjectConfig

buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath Libs.Plugins.android
        classpath Libs.Plugins.detekt
        classpath Libs.Plugins.kotlin
        classpath Libs.Plugins.spotless
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.27.0'
}

subprojects {
    apply plugin: 'io.gitlab.arturbosch.detekt'

    repositories {
        google()
        jcenter()
    }

    pluginManager.withPlugin('kotlin-android') {
        dependencies {
            implementation(Libs.Kotlin.stdlib8)
        }
    }

    pluginManager.withPlugin('kotlin-kapt') {
        kapt {
            useBuildCache = true
            // https://github.com/google/dagger/issues/1449#issuecomment-495404186
            javacOptions {
                option '-source', '8'
                option '-target', '8'
            }
        }
    }

    if (name == 'app') {
        apply plugin: 'com.android.application'
    } else {
        apply plugin: 'com.android.library'
        android.libraryVariants.all { variant ->
            variant.generateBuildConfigProvider.configure { enabled = false }
        }
    }

    android {
        compileSdkVersion ProjectConfig.compileSdk
        buildToolsVersion = ProjectConfig.buildTools
        defaultConfig {
            minSdkVersion ProjectConfig.minSdk
            targetSdkVersion ProjectConfig.targetSdk
            versionCode ProjectConfig.versionCode
            versionName ProjectConfig.versionName
        }
        compileOptions {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }
        testOptions.unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:unchecked'
        options.deprecation = true
    }

    tasks.withType(KotlinCompile).all {
        kotlinOptions {
            jvmTarget = '1.8'
        }
    }

    detekt {
        config = rootProject.files('detekt-config.yml')
        baseline = project.file('detekt-baseline.xml')
        parallel = true
    }

    afterEvaluate {
        project.tasks.getByName('check').dependsOn 'detekt'
    }
}

project(':app') {
    repositories {
        maven { url 'https://jitpack.io' }
    }
}

tasks {
    wrapper {
        distributionType = Wrapper.DistributionType.ALL
    }
}

task installHook(type: Copy) {
    from 'ci'
    into rootProject.file('.git/hooks/')
    rename('pre-push-recommended.sh', 'pre-push')
    fileMode 0755
}
