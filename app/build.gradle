/*
 * Copyright © 2017-2019 WireGuard LLC.
 * Copyright © 2018-2019 Harsh Shandilya <msfjarvis@gmail.com>. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */
plugins {
    id 'kotlin-android'
    id 'kotlin-kapt'
}

final def keystorePropertiesFile = rootProject.file 'keystore.properties'

final def gitHash = { ->
    final def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    stdout.toString().trim()
}

final def isCi() {
    return System.env['GITHUB_WORKFLOW'] != null || System.env['DRONE'] != null
}

android {
    dataBinding.enabled = true
    if (!isCi()) {
        android.applicationVariants.all { final variant ->
            variant.outputs.all {
                outputFileName = "viscerion_${gitHash()}.apk"
            }
        }
    }
    defaultConfig {
        applicationId 'me.msfjarvis.viscerion'
        resConfigs 'de', 'en', 'fr', 'pt-rBR', 'ru'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    if (keystorePropertiesFile.exists()) {
        final def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
        signingConfigs {
            release {
                keyAlias = keystoreProperties['keyAlias']
                keyPassword = keystoreProperties['keyPassword']
                storeFile = rootProject.file keystoreProperties['storeFile']
                storePassword = keystoreProperties['storePassword']
            }
        }
        buildTypes.release.signingConfig = signingConfigs.release
        buildTypes.debug.signingConfig = signingConfigs.release
    }
    buildTypes {
        release {
            minifyEnabled = true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'GIT_HASH', '\"\"'
        }
        debug {
            applicationIdSuffix = '.debug'
            versionNameSuffix = '-debug'
            minifyEnabled = false
            buildConfigField 'String', 'GIT_HASH', isCi() ? "\"${gitHash()}\"" : '\"\"'
        }
    }
    lintOptions {
        abortOnError = true
        disable(
            'UnusedResources', // Databinding-only layouts are misinterpreted by Android lint as unused
            'MissingTranslation', // I personally resolve these issues before releases
            'ImpliedQuantity' // Some languages differ between 0 and 1 quantities but I don't use %d in the confirm_tunnel_deletion plural so lint trips
        )
    }
}

dependencies {
    implementation (project(':crypto'))
    implementation (project(':native'))
    implementation deps.androidx.annotation
    implementation deps.androidx.appcompat
    implementation deps.androidx.biometric
    implementation deps.androidx.constraint_layout
    implementation deps.androidx.core_ktx
    implementation deps.androidx.fragment_ktx
    implementation deps.androidx.material
    implementation deps.androidx.preference
    implementation(deps.androidx.recycler_view) {
        force = true
    }
    implementation deps.androidx.slice_builders
    implementation deps.androidx.slice_builders_ktx
    implementation deps.androidx.slice_core
    implementation deps.androidx.work_ktx
    implementation deps.third_party.barcode
    implementation deps.third_party.koin_android
    implementation deps.third_party.retrofuture
    implementation deps.third_party.threetenabp
    implementation deps.third_party.timber
    if (!isCi()) debugImplementation deps.third_party.leak_canary
    androidTestImplementation deps.testing.junit
    androidTestImplementation deps.testing.koin_test
    androidTestImplementation deps.testing.androidx.runner
    androidTestImplementation deps.testing.androidx.rules
    androidTestImplementation deps.testing.androidx.junit
}
