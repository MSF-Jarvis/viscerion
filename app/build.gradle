/*
 * Copyright © 2017-2019 WireGuard LLC.
 * Copyright © 2018-2019 Harsh Shandilya <msfjarvis@gmail.com>. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'kotlin-android'
    id 'kotlin-kapt'
}

final def keystorePropertiesFile = rootProject.file 'keystore.properties'

final def gitHash = { ->
    final def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    stdout.toString().trim()
}

final def isCi() {
    return System.env['GITHUB_WORKFLOW'] != null || System.env['DRONE'] != null
}

android {
    dataBinding.enabled = true
    if (!isCi()) {
        android.applicationVariants.all { final variant ->
            variant.outputs.all {
                outputFileName = "viscerion_${gitHash()}.apk"
            }
        }
    }
    defaultConfig {
        applicationId 'me.msfjarvis.viscerion'
        resConfigs 'de', 'en', 'fr', 'pt-rBR', 'ru'
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    if (keystorePropertiesFile.exists()) {
        final def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
        signingConfigs {
            release {
                keyAlias = keystoreProperties['keyAlias']
                keyPassword = keystoreProperties['keyPassword']
                storeFile = rootProject.file keystoreProperties['storeFile']
                storePassword = keystoreProperties['storePassword']
            }
        }
        buildTypes.release.signingConfig = signingConfigs.release
        buildTypes.debug.signingConfig = signingConfigs.release
    }
    buildTypes {
        release {
            minifyEnabled = true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'GIT_HASH', '\"\"'
        }
        debug {
            applicationIdSuffix = '.debug'
            versionNameSuffix = '-debug'
            minifyEnabled = false
            buildConfigField 'String', 'GIT_HASH', isCi() ? "\"${gitHash()}\"" : '\"\"'
        }
    }
    lintOptions {
        abortOnError = true
        disable(
            'UnusedResources', // Databinding-only layouts are misinterpreted by Android lint as unused
            'MissingTranslation', // I personally resolve these issues before releases
            'ImpliedQuantity' // Some languages differ between 0 and 1 quantities but I don't use %d in the confirm_tunnel_deletion plural so lint trips
        )
    }
}

dependencies {
    implementation (project(':crypto'))
    implementation (project(':native'))
    implementation 'net.sourceforge.streamsupport:android-retrofuture:' + versions.retrofuture
    implementation 'androidx.annotation:annotation:' + versions.annotation
    implementation 'androidx.appcompat:appcompat:' + versions.appcompat
    implementation 'androidx.biometric:biometric:' + versions.biometric
    implementation 'androidx.constraintlayout:constraintlayout:' + versions.constraintLayout
    implementation 'androidx.core:core-ktx:' + versions.coreKtx
    implementation 'androidx.fragment:fragment-ktx:' + versions.fragmentKtx
    implementation 'com.google.android.material:material:' + versions.material
    implementation 'com.kroegerama:barcode-kaiteki:' + versions.barcode
    implementation 'org.koin:koin-android:' + versions.koin
    implementation 'org.koin:koin-core:' + versions.koin
    implementation 'androidx.preference:preference:' + versions.preference
    implementation('androidx.recyclerview:recyclerview:' + versions.recyclerview) {
        force = true
    }
    implementation 'androidx.slice:slice-builders:' + versions.slice
    implementation 'androidx.slice:slice-core:' + versions.slice
    implementation 'androidx.slice:slice-builders-ktx:' + versions.sliceKtx
    implementation 'com.jakewharton.threetenabp:threetenabp:' + versions.threetenabp
    implementation 'com.jakewharton.timber:timber:' + versions.timber
    implementation 'androidx.work:work-runtime-ktx:' + versions.work
    implementation 'com.google.dagger:dagger:' + versions.dagger
    kapt 'com.google.dagger:dagger-compiler:' + versions.dagger
    if (!isCi()) debugImplementation 'com.squareup.leakcanary:leakcanary-android:' + versions.leakcanary
}

kapt {
    useBuildCache = true
    // https://github.com/google/dagger/issues/1449#issuecomment-495404186
    javacOptions {
        option '-source', '8'
        option '-target', '8'
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}
tasks.withType(KotlinCompile) {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}
