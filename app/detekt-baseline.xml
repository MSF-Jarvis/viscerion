<?xml version="1.0" ?>
<SmellBaseline>
  <Blacklist></Blacklist>
  <Whitelist>
    <ID>ComplexCondition:KeyInputFilter.kt$KeyInputFilter$(dIndex + 1 &lt; Key.Format.BASE64.length &amp;&amp; isAllowed(c) || dIndex + 1 == Key.Format.BASE64.length &amp;&amp; c == '=') &amp;&amp; dLength + (sIndex - start) &lt; Key.Format.BASE64.length</ID>
    <ID>ConstructorParameterNaming:ConfigProxy.kt$ConfigProxy$`in`: Parcel</ID>
    <ID>ConstructorParameterNaming:InterfaceProxy.kt$InterfaceProxy$`in`: Parcel</ID>
    <ID>ConstructorParameterNaming:PeerProxy.kt$PeerProxy$`in`: Parcel</ID>
    <ID>ForbiddenComment:ItemChangeListener.kt$ItemChangeListener.OnListChangedCallback$// TODO: recycle views</ID>
    <ID>ForbiddenComment:Tunnel.kt$Tunnel$// FIXME: Check age of statistics.</ID>
    <ID>FunctionParameterNaming:Config.kt$Config.Builder$`interface`: Interface</ID>
    <ID>LongMethod:SettingsActivity.kt$SettingsActivity.SettingsFragment$onCreatePreferences</ID>
    <ID>MandatoryBracesIfStatements:AppListDialogFragment.kt$AppListDialogFragment$false</ID>
    <ID>MandatoryBracesIfStatements:AppListDialogFragment.kt$AppListDialogFragment$prefs.exclusions.contains(pkgInfo.packageName)</ID>
    <ID>MandatoryBracesIfStatements:Application.kt$Application$createNotificationChannel()</ID>
    <ID>MandatoryBracesIfStatements:Attribute.kt$Attribute.Companion$Attribute( requireNotNull(matcher.group(1)), requireNotNull(matcher.group(2)) )</ID>
    <ID>MandatoryBracesIfStatements:Attribute.kt$Attribute.Companion$null</ID>
    <ID>MandatoryBracesIfStatements:BackendFactory.kt$BackendFactory$ret = GoBackend(context, prefs)</ID>
    <ID>MandatoryBracesIfStatements:BackendFactory.kt$BackendFactory$throw Exception("Forcing userspace backend on user request.")</ID>
    <ID>MandatoryBracesIfStatements:BaseActivity.kt$BaseActivity$return</ID>
    <ID>MandatoryBracesIfStatements:BaseFragment.kt$BaseFragment$Snackbar.make(view, message, Snackbar.LENGTH_LONG).show()</ID>
    <ID>MandatoryBracesIfStatements:BaseFragment.kt$BaseFragment$Toast.makeText(context, message, Toast.LENGTH_LONG).show()</ID>
    <ID>MandatoryBracesIfStatements:BaseFragment.kt$BaseFragment$return</ID>
    <ID>MandatoryBracesIfStatements:BindingAdapters.kt$return</ID>
    <ID>MandatoryBracesIfStatements:BindingAdapters.kt$view.layoutManager = LinearLayoutManager(view.context, RecyclerView.VERTICAL, false)</ID>
    <ID>MandatoryBracesIfStatements:BootShutdownReceiver.kt$BootShutdownReceiver$return@thenAccept</ID>
    <ID>MandatoryBracesIfStatements:Config.kt$Config$return false</ID>
    <ID>MandatoryBracesIfStatements:Config.kt$Config.Companion$builder.parsePeer(peerLines)</ID>
    <ID>MandatoryBracesIfStatements:Config.kt$Config.Companion$continue</ID>
    <ID>MandatoryBracesIfStatements:Config.kt$Config.Companion$line = line.substring(0, commentIndex)</ID>
    <ID>MandatoryBracesIfStatements:Config.kt$Config.Companion$throw BadConfigException( Section.CONFIG, Location.TOP_LEVEL, Reason.MISSING_SECTION, null )</ID>
    <ID>MandatoryBracesIfStatements:ErrorMessages.kt$ErrorMessages$PE_CLASS_MAP[pe.parsingClass] as Int</ID>
    <ID>MandatoryBracesIfStatements:ErrorMessages.kt$ErrorMessages$R.string.parse_error_generic</ID>
    <ID>MandatoryBracesIfStatements:ErrorMessages.kt$ErrorMessages$break</ID>
    <ID>MandatoryBracesIfStatements:ErrorMessages.kt$ErrorMessages$resources.getString( R.string.bad_config_context, rootCause.section.name, rootCause.location.name )</ID>
    <ID>MandatoryBracesIfStatements:ErrorMessages.kt$ErrorMessages$resources.getString( R.string.bad_config_context_top_level, rootCause.section.name )</ID>
    <ID>MandatoryBracesIfStatements:ErrorMessages.kt$ErrorMessages$return ": " + pe.message</ID>
    <ID>MandatoryBracesIfStatements:ErrorMessages.kt$ErrorMessages$return resources.getString(KFE_FORMAT_MAP[kfe.format] as Int)</ID>
    <ID>MandatoryBracesIfStatements:ErrorMessages.kt$ErrorMessages$return resources.getString(R.string.unknown_error)</ID>
    <ID>MandatoryBracesIfStatements:ExceptionLoggers.kt$ExceptionLoggers$Log.println(Log.ERROR, TAG, Log.getStackTraceString(throwable))</ID>
    <ID>MandatoryBracesIfStatements:ExceptionLoggers.kt$ExceptionLoggers$Log.println(priority, TAG, "Future completed successfully")</ID>
    <ID>MandatoryBracesIfStatements:Extensions.kt$return</ID>
    <ID>MandatoryBracesIfStatements:FileConfigStore.kt$FileConfigStore$Timber.w("Couldn't delete marker file for new name $replacement")</ID>
    <ID>MandatoryBracesIfStatements:FileConfigStore.kt$FileConfigStore$throw FileNotFoundException(context.getString(R.string.config_not_found_error, file.name))</ID>
    <ID>MandatoryBracesIfStatements:FileConfigStore.kt$FileConfigStore$throw IOException(context.getString(R.string.config_delete_error, file.name))</ID>
    <ID>MandatoryBracesIfStatements:FileConfigStore.kt$FileConfigStore$throw IOException(context.getString(R.string.config_exists_error, replacement))</ID>
    <ID>MandatoryBracesIfStatements:FileConfigStore.kt$FileConfigStore$throw IOException(context.getString(R.string.config_file_exists_error, file.name))</ID>
    <ID>MandatoryBracesIfStatements:GoBackend.kt$GoBackend$builder.setMetered(false)</ID>
    <ID>MandatoryBracesIfStatements:GoBackend.kt$GoBackend$finalState = if (originalState == Tunnel.State.UP) Tunnel.State.DOWN else Tunnel.State.UP</ID>
    <ID>MandatoryBracesIfStatements:GoBackend.kt$GoBackend$mtu = 1280</ID>
    <ID>MandatoryBracesIfStatements:GoBackend.kt$GoBackend$return originalState</ID>
    <ID>MandatoryBracesIfStatements:GoBackend.kt$GoBackend$startVpnService()</ID>
    <ID>MandatoryBracesIfStatements:GoBackend.kt$GoBackend$throw Exception(context.getString(R.string.tun_create_error))</ID>
    <ID>MandatoryBracesIfStatements:GoBackend.kt$GoBackend$throw Exception(context.getString(R.string.tunnel_on_error, currentTunnelHandle))</ID>
    <ID>MandatoryBracesIfStatements:GoBackend.kt$GoBackend$throw Exception(context.getString(R.string.vpn_not_authorized_error))</ID>
    <ID>MandatoryBracesIfStatements:GoBackend.kt$GoBackend$throw NullPointerException(context.getString(R.string.no_config_error))</ID>
    <ID>MandatoryBracesIfStatements:GoBackend.kt$GoBackend.VpnService$tunnel.setState(Tunnel.State.DOWN)</ID>
    <ID>MandatoryBracesIfStatements:InetAddressUtils.kt$InetAddressUtils$return InetAddress.getByName(address)</ID>
    <ID>MandatoryBracesIfStatements:InetAddressUtils.kt$InetAddressUtils$throw ParseException(InetAddress::class.java, address, "Empty address")</ID>
    <ID>MandatoryBracesIfStatements:InetAddressUtils.kt$InetAddressUtils$throw ParseException(InetAddress::class.java, address, "Not an IP address")</ID>
    <ID>MandatoryBracesIfStatements:InetAddressUtils.kt$InetAddressUtils$throw ParseException(InetAddress::class.java, address, cause)</ID>
    <ID>MandatoryBracesIfStatements:InetEndpoint.kt$InetEndpoint$return false</ID>
    <ID>MandatoryBracesIfStatements:InetEndpoint.kt$InetEndpoint$return this</ID>
    <ID>MandatoryBracesIfStatements:InetEndpoint.kt$InetEndpoint.Companion$throw ParseException(InetEndpoint::class.java, endpoint, "Forbidden characters")</ID>
    <ID>MandatoryBracesIfStatements:InetEndpoint.kt$InetEndpoint.Companion$throw ParseException(InetEndpoint::class.java, endpoint, "Missing/invalid port number")</ID>
    <ID>MandatoryBracesIfStatements:InetNetwork.kt$InetNetwork$return false</ID>
    <ID>MandatoryBracesIfStatements:InetNetwork.kt$InetNetwork.Companion$throw ParseException(InetNetwork::class.java, maskString, "Invalid network mask")</ID>
    <ID>MandatoryBracesIfStatements:Interface.kt$Interface$excludedApplications</ID>
    <ID>MandatoryBracesIfStatements:Interface.kt$Interface$excludedApplications - prefs.exclusions</ID>
    <ID>MandatoryBracesIfStatements:Interface.kt$Interface$return false</ID>
    <ID>MandatoryBracesIfStatements:Interface.kt$Interface$sb.append("Address = ").append(Attribute.join(addresses)).append('\n')</ID>
    <ID>MandatoryBracesIfStatements:Interface.kt$Interface$sb.append("ExcludedApplications = ").append(Attribute.join(localExclusions)).append('\n')</ID>
    <ID>MandatoryBracesIfStatements:Interface.kt$Interface.Builder$excludedApplications.add(exclusion)</ID>
    <ID>MandatoryBracesIfStatements:Interface.kt$Interface.Builder$throw BadConfigException( Section.INTERFACE, Location.LISTEN_PORT, Reason.INVALID_VALUE, listenPort.toString() )</ID>
    <ID>MandatoryBracesIfStatements:Interface.kt$Interface.Builder$throw BadConfigException( Section.INTERFACE, Location.LISTEN_PORT, Reason.INVALID_VALUE, mtu.toString() )</ID>
    <ID>MandatoryBracesIfStatements:Interface.kt$Interface.Builder$throw BadConfigException( Section.INTERFACE, Location.PRIVATE_KEY, Reason.MISSING_ATTRIBUTE, null )</ID>
    <ID>MandatoryBracesIfStatements:ItemChangeListener.kt$ItemChangeListener$list?.removeOnListChangedCallback(callback)</ID>
    <ID>MandatoryBracesIfStatements:KeyInputFilter.kt$KeyInputFilter$replacement = SpannableStringBuilder(source, start, end)</ID>
    <ID>MandatoryBracesIfStatements:MainActivity.kt$MainActivity$return</ID>
    <ID>MandatoryBracesIfStatements:NameInputFilter.kt$NameInputFilter$replacement = SpannableStringBuilder(source, sStart, sEnd)</ID>
    <ID>MandatoryBracesIfStatements:ObservableKeyedRecyclerViewAdapter.kt$ObservableKeyedRecyclerViewAdapter.OnListChangedCallback$adapter.notifyDataSetChanged()</ID>
    <ID>MandatoryBracesIfStatements:ObservableKeyedRecyclerViewAdapter.kt$ObservableKeyedRecyclerViewAdapter.OnListChangedCallback$sender.removeOnListChangedCallback(this)</ID>
    <ID>MandatoryBracesIfStatements:Peer.kt$Peer$return false</ID>
    <ID>MandatoryBracesIfStatements:Peer.kt$Peer.Builder$throw BadConfigException( Section.PEER, Location.PERSISTENT_KEEPALIVE, Reason.INVALID_VALUE, persistentKeepalive.toString() )</ID>
    <ID>MandatoryBracesIfStatements:Peer.kt$Peer.Builder$throw BadConfigException( Section.PEER, Location.PUBLIC_KEY, Reason.MISSING_ATTRIBUTE, null )</ID>
    <ID>MandatoryBracesIfStatements:PeerProxy.kt$PeerProxy$AllowedIpsState.CONTAINS_IPV4_PUBLIC_NETWORKS</ID>
    <ID>MandatoryBracesIfStatements:PeerProxy.kt$PeerProxy$AllowedIpsState.CONTAINS_IPV4_WILDCARD</ID>
    <ID>MandatoryBracesIfStatements:PeerProxy.kt$PeerProxy$interfaceDnsListener = InterfaceDnsListener(this)</ID>
    <ID>MandatoryBracesIfStatements:PeerProxy.kt$PeerProxy$output.add(network)</ID>
    <ID>MandatoryBracesIfStatements:PeerProxy.kt$PeerProxy$output.add(replacement)</ID>
    <ID>MandatoryBracesIfStatements:PeerProxy.kt$PeerProxy$output.addAll(dnsRoutes)</ID>
    <ID>MandatoryBracesIfStatements:PeerProxy.kt$PeerProxy$output.removeAll(dnsRoutes)</ID>
    <ID>MandatoryBracesIfStatements:PeerProxy.kt$PeerProxy$peerListListener = PeerListListener(this)</ID>
    <ID>MandatoryBracesIfStatements:PeerProxy.kt$PeerProxy$return</ID>
    <ID>MandatoryBracesIfStatements:PeerProxy.kt$PeerProxy.InterfaceDnsListener$return</ID>
    <ID>MandatoryBracesIfStatements:QuickTileService.kt$QuickTileService$Tile.STATE_ACTIVE</ID>
    <ID>MandatoryBracesIfStatements:QuickTileService.kt$QuickTileService$Tile.STATE_INACTIVE</ID>
    <ID>MandatoryBracesIfStatements:QuickTileService.kt$QuickTileService.OnStateChangedCallback$return</ID>
    <ID>MandatoryBracesIfStatements:QuickTileService.kt$QuickTileService.OnTunnelChangedCallback$return</ID>
    <ID>MandatoryBracesIfStatements:RootShell.kt$RootShell$return</ID>
    <ID>MandatoryBracesIfStatements:RootShell.kt$RootShell$return true</ID>
    <ID>MandatoryBracesIfStatements:RootShell.kt$RootShell$throw FileNotFoundException("Could not create local binary directory")</ID>
    <ID>MandatoryBracesIfStatements:RootShell.kt$RootShell$throw FileNotFoundException("Could not create local temporary directory")</ID>
    <ID>MandatoryBracesIfStatements:RootShell.kt$RootShell$throw IOException("Unable to read exit status")</ID>
    <ID>MandatoryBracesIfStatements:RootShell.kt$RootShell$throw IOException(context.getString(R.string.shell_marker_count_error, markersSeen))</ID>
    <ID>MandatoryBracesIfStatements:RootShell.kt$RootShell$throw NoRootException(deviceNotRootedMessage)</ID>
    <ID>MandatoryBracesIfStatements:SettingsActivity.kt$SettingsActivity.SettingsFragment$PackageManager.COMPONENT_ENABLED_STATE_DISABLED</ID>
    <ID>MandatoryBracesIfStatements:SettingsActivity.kt$SettingsActivity.SettingsFragment$PackageManager.COMPONENT_ENABLED_STATE_ENABLED</ID>
    <ID>MandatoryBracesIfStatements:SettingsActivity.kt$SettingsActivity.SettingsFragment$debugOnlyPrefs.filterNotNull().forEach { it.isVisible = true }</ID>
    <ID>MandatoryBracesIfStatements:SettingsActivity.kt$SettingsActivity.SettingsFragment$getString(R.string.tasker_integration_secret_summary)</ID>
    <ID>MandatoryBracesIfStatements:SettingsActivity.kt$SettingsActivity.SettingsFragment$getString(R.string.tasker_integration_summary_empty_secret)</ID>
    <ID>MandatoryBracesIfStatements:SettingsActivity.kt$SettingsActivity.SettingsFragment$it.isVisible = true</ID>
    <ID>MandatoryBracesIfStatements:SettingsActivity.kt$SettingsActivity.SettingsFragment$screen.removePreference(it)</ID>
    <ID>MandatoryBracesIfStatements:SharedLibraryLoader.kt$SharedLibraryLoader$return splitDir</ID>
    <ID>MandatoryBracesIfStatements:SharedLibraryLoader.kt$SharedLibraryLoader$throw noAbiException</ID>
    <ID>MandatoryBracesIfStatements:TaskerIntegrationReceiver.kt$TaskerIntegrationReceiver$return</ID>
    <ID>MandatoryBracesIfStatements:ToggleSwitch.kt$ToggleSwitch$return</ID>
    <ID>MandatoryBracesIfStatements:ToolsInstaller.kt$ToolsInstaller$return ERROR</ID>
    <ID>MandatoryBracesIfStatements:ToolsInstaller.kt$ToolsInstaller$return OsConstants.ENOENT</ID>
    <ID>MandatoryBracesIfStatements:ToolsInstaller.kt$ToolsInstaller$throw FileNotFoundException("Required tools unavailable")</ID>
    <ID>MandatoryBracesIfStatements:ToolsInstaller.kt$ToolsInstaller$throw FileNotFoundException("Unable to find ${EXECUTABLES[i]}")</ID>
    <ID>MandatoryBracesIfStatements:ToolsInstaller.kt$ToolsInstaller$throw IOException("Unable to mark ${file.absolutePath} as executable")</ID>
    <ID>MandatoryBracesIfStatements:ToolsInstaller.kt$ToolsInstaller.Companion$return dir</ID>
    <ID>MandatoryBracesIfStatements:ToolsInstallerPreference.kt$ToolsInstallerPreference$isEnabled = state.shouldEnableView</ID>
    <ID>MandatoryBracesIfStatements:ToolsInstallerPreference.kt$ToolsInstallerPreference$return</ID>
    <ID>MandatoryBracesIfStatements:ToolsInstallerPreference.kt$ToolsInstallerPreference$setState(State.ALREADY)</ID>
    <ID>MandatoryBracesIfStatements:ToolsInstallerPreference.kt$ToolsInstallerPreference$setState(State.INITIAL)</ID>
    <ID>MandatoryBracesIfStatements:ToolsInstallerPreference.kt$ToolsInstallerPreference$setState(State.INITIAL_MAGISK)</ID>
    <ID>MandatoryBracesIfStatements:ToolsInstallerPreference.kt$ToolsInstallerPreference$setState(State.INITIAL_SYSTEM)</ID>
    <ID>MandatoryBracesIfStatements:Tunnel.kt$Tunnel$TunnelManager.getTunnelStatistics(this).whenComplete(ExceptionLoggers.E)</ID>
    <ID>MandatoryBracesIfStatements:Tunnel.kt$Tunnel$manager.getTunnelConfig(this).whenComplete(ExceptionLoggers.E)</ID>
    <ID>MandatoryBracesIfStatements:Tunnel.kt$Tunnel$onStatisticsChanged(null)</ID>
    <ID>MandatoryBracesIfStatements:TunnelDetailFragment.kt$TunnelDetailFragment$binding?.config = null</ID>
    <ID>MandatoryBracesIfStatements:TunnelDetailFragment.kt$TunnelDetailFragment$newTunnel.configAsync.thenAccept { a -&gt; binding?.config = a }</ID>
    <ID>MandatoryBracesIfStatements:TunnelEditorFragment.kt$TunnelEditorFragment$binding?.config = config</ID>
    <ID>MandatoryBracesIfStatements:TunnelEditorFragment.kt$TunnelEditorFragment$onSelectedTunnelChanged(null, tunnel)</ID>
    <ID>MandatoryBracesIfStatements:TunnelEditorFragment.kt$TunnelEditorFragment$requireActivity().window?.apply { val ctx = requireContext() navigationBarColor = ContextCompat.getColor(ctx, R.color.secondary_dark_color) if (Build.VERSION.SDK_INT &gt;= 27 &amp;&amp; (!getPrefs().useDarkTheme &amp;&amp; !ctx.isSystemDarkThemeEnabled())) { // Clear window flags to let navigation bar be dark decorView.systemUiVisibility = View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR } }</ID>
    <ID>MandatoryBracesIfStatements:TunnelEditorFragment.kt$TunnelEditorFragment$return</ID>
    <ID>MandatoryBracesIfStatements:TunnelEditorFragment.kt$TunnelEditorFragment$selectedTunnel = null</ID>
    <ID>MandatoryBracesIfStatements:TunnelListFragment.kt$TunnelListFragment$continue</ID>
    <ID>MandatoryBracesIfStatements:TunnelListFragment.kt$TunnelListFragment$data?.data?.also { uri -&gt; Timber.tag("TunnelImport").i("Import uri: $uri") importTunnel(uri) }</ID>
    <ID>MandatoryBracesIfStatements:TunnelListFragment.kt$TunnelListFragment$futureTunnels.add(tunnelManager.create(name, config).toCompletableFuture())</ID>
    <ID>MandatoryBracesIfStatements:TunnelListFragment.kt$TunnelListFragment$name = Uri.decode(uri.lastPathSegment)</ID>
    <ID>MandatoryBracesIfStatements:TunnelListFragment.kt$TunnelListFragment$name = cursor.getString(0)</ID>
    <ID>MandatoryBracesIfStatements:TunnelListFragment.kt$TunnelListFragment$name = name.substring(0, name.length - CONFIGURATION_FILE_SUFFIX.length)</ID>
    <ID>MandatoryBracesIfStatements:TunnelListFragment.kt$TunnelListFragment$return</ID>
    <ID>MandatoryBracesIfStatements:TunnelListFragment.kt$TunnelListFragment$throw throwables[0]</ID>
    <ID>MandatoryBracesIfStatements:TunnelListFragment.kt$TunnelListFragment$tunnels.add(tunnel)</ID>
    <ID>MandatoryBracesIfStatements:TunnelListFragment.kt$TunnelListFragment.&lt;no name provided&gt;$setMultiSelected(actionModeListener.checkedItems.contains(position))</ID>
    <ID>MandatoryBracesIfStatements:TunnelListFragment.kt$TunnelListFragment.&lt;no name provided&gt;$setSingleSelected(selectedTunnel == tunnel)</ID>
    <ID>MandatoryBracesIfStatements:TunnelManager.kt$TunnelManager$backend.setState(tunnel, Tunnel.State.DOWN)</ID>
    <ID>MandatoryBracesIfStatements:TunnelManager.kt$TunnelManager$backend.setState(tunnel, Tunnel.State.UP)</ID>
    <ID>MandatoryBracesIfStatements:TunnelManager.kt$TunnelManager$future.complete(v)</ID>
    <ID>MandatoryBracesIfStatements:TunnelManager.kt$TunnelManager$future.completeExceptionally(t)</ID>
    <ID>MandatoryBracesIfStatements:TunnelManager.kt$TunnelManager$getTunnelState(tunnel)</ID>
    <ID>MandatoryBracesIfStatements:TunnelManager.kt$TunnelManager$return</ID>
    <ID>MandatoryBracesIfStatements:TunnelManager.kt$TunnelManager$return CompletableFuture.completedFuture(null)</ID>
    <ID>MandatoryBracesIfStatements:TunnelManager.kt$TunnelManager$return CompletableFuture.failedFuture(IllegalArgumentException(context.getString(R.string.tunnel_error_invalid_name)))</ID>
    <ID>MandatoryBracesIfStatements:TunnelManager.kt$TunnelManager$return@whenComplete</ID>
    <ID>MandatoryBracesIfStatements:TunnelManager.kt$TunnelManager$setLastUsedTunnel(null)</ID>
    <ID>MandatoryBracesIfStatements:TunnelManager.kt$TunnelManager$setLastUsedTunnel(tunnel)</ID>
    <ID>MandatoryBracesIfStatements:TunnelManager.kt$TunnelManager$setLastUsedTunnel(tunnels[lastUsedName])</ID>
    <ID>MandatoryBracesIfStatements:TunnelManager.kt$TunnelManager$tunnel.setState(Tunnel.State.DOWN).whenComplete { _, _ -&gt; tunnel.setState(Tunnel.State.UP) }</ID>
    <ID>MandatoryBracesIfStatements:TunnelManager.kt$TunnelManager.IntentReceiver$return</ID>
    <ID>MandatoryBracesIfStatements:VersionPreference.kt$VersionPreference$getContext().getString( R.string.version_summary_unknown, backend.getTypePrettyName().toLowerCase(Locale.ROOT) )</ID>
    <ID>MandatoryBracesIfStatements:VersionPreference.kt$VersionPreference$getContext().getString(R.string.version_summary, backend.getTypePrettyName(), version)</ID>
    <ID>MandatoryBracesIfStatements:WgQuickBackend.kt$WgQuickBackend$command = "cat /sys/module/wireguard/version &amp;&amp; $command"</ID>
    <ID>MandatoryBracesIfStatements:WgQuickBackend.kt$WgQuickBackend$return emptySet()</ID>
    <ID>MandatoryBracesIfStatements:WgQuickBackend.kt$WgQuickBackend$return originalState</ID>
    <ID>MandatoryBracesIfStatements:WgQuickBackend.kt$WgQuickBackend$stateToSet = if (originalState == State.UP) State.DOWN else State.UP</ID>
    <ID>MandatoryBracesIfStatements:WgQuickBackend.kt$WgQuickBackend$throw Exception(context.getString(R.string.module_version_error))</ID>
    <ID>MandatoryBracesIfStatements:ZipExporter.kt$ZipExporter$throw exception</ID>
    <ID>MaxLineLength:InetAddressUtils.kt$InetAddressUtils$private val WONT_TOUCH_RESOLVER: Pattern = Pattern.compile("^(((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:)(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?)|((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))$")</ID>
    <ID>MaxLineLength:Interface.kt$Interface$ override fun toString(): String</ID>
    <ID>MaxLineLength:RootShell.kt$RootShell$private val preamble: String = "export CALLING_PACKAGE=${BuildConfig.APPLICATION_ID} PATH=\"$localBinaryDir:\$PATH\" TMPDIR='$localTemporaryDir'; id -u\n"</ID>
    <ID>MaxLineLength:SettingsActivity.kt$SettingsActivity.SettingsFragment$Snackbar.make(snackbarView, ctx.getString(R.string.zip_export_success, fileUri.humanReadablePath), Snackbar.LENGTH_LONG).show()</ID>
    <ID>MaxLineLength:ToolsInstaller.kt$ToolsInstaller$"cp '${File(localBinaryDir, name)}' '$destination'; chmod 755 '$destination'; chcon 'u:object_r:system_file:s0' '$destination' || true; "</ID>
    <ID>MaxLineLength:ToolsInstaller.kt$ToolsInstaller$"printf 'name=Viscerion Command Line Tools\nversion=${BuildConfig.VERSION_NAME}\nversionCode=${BuildConfig.VERSION_CODE}\nauthor=msfjarvis\ndescription=Command line tools for Viscerion\nminMagisk=1800\n' &gt; $magiskDirectory/module.prop; "</ID>
    <ID>MaxLineLength:ToolsInstaller.kt$ToolsInstaller$Timber.d(if (extract()) "Tools are now extracted into our private binary dir" else "Tools were already extracted into our private binary dir")</ID>
    <ID>ReturnCount:ErrorMessages.kt$ErrorMessages$private fun getBadConfigExceptionExplanation( resources: Resources, bce: BadConfigException ): String</ID>
    <ID>ReturnCount:MainActivity.kt$MainActivity$override fun onOptionsItemSelected(item: MenuItem): Boolean</ID>
    <ID>ReturnCount:TunnelDetailFragment.kt$TunnelDetailFragment$private fun formatBytes(bytes: Long): String?</ID>
    <ID>ThrowsCount:Config.kt$Config.Companion$ @Throws(IOException::class, BadConfigException::class) fun parse(reader: BufferedReader): Config</ID>
    <ID>ThrowsCount:GoBackend.kt$GoBackend$@Throws(Exception::class) private fun setStateInternal(tunnel: Tunnel?, config: Config?, state: Tunnel.State?)</ID>
    <ID>ThrowsCount:InetAddressUtils.kt$InetAddressUtils$ @Throws(ParseException::class) fun parse(address: String): InetAddress</ID>
    <ID>ThrowsCount:InetEndpoint.kt$InetEndpoint.Companion$@Throws(ParseException::class) fun parse(endpoint: String): InetEndpoint</ID>
    <ID>ThrowsCount:RootShell.kt$RootShell$@Synchronized @Throws(IOException::class, NoRootException::class) fun start()</ID>
    <ID>TooManyFunctions:GoBackend.kt$GoBackend$GoBackend</ID>
    <ID>TooManyFunctions:Interface.kt$Interface.Builder$Builder</ID>
    <ID>TooManyFunctions:KoinExtensions.kt$com.wireguard.android.di.ext.KoinExtensions.kt</ID>
    <ID>TooManyFunctions:Peer.kt$Peer.Builder$Builder</ID>
    <ID>TooManyFunctions:PeerProxy.kt$PeerProxy$PeerProxy</ID>
    <ID>TooManyFunctions:TunnelEditorFragment.kt$TunnelEditorFragment$TunnelEditorFragment</ID>
    <ID>TooManyFunctions:TunnelListFragment.kt$TunnelListFragment$TunnelListFragment</ID>
    <ID>TooManyFunctions:TunnelManager.kt$TunnelManager$TunnelManager</ID>
    <ID>VariableNaming:Config.kt$Config$/** * Returns the interface section of the configuration. * * @return the interface configuration */ val `interface`: Interface</ID>
    <ID>VariableNaming:Config.kt$Config.Builder$// No default; must be provided before building. var `interface`: Interface? = null</ID>
    <ID>VariableNaming:ConfigProxy.kt$ConfigProxy$val `interface`: InterfaceProxy</ID>
    <ID>VariableNaming:PeerProxy.kt$PeerProxy$val `interface` = it.`interface`</ID>
    <ID>VariableNaming:PeerProxy.kt$PeerProxy$val `interface` = owner.`interface`</ID>
    <ID>VariableNaming:TaskerActivity.kt$TaskerActivity$val EXTRA_BUNDLE = "com.twofortyfouram.locale.intent.extra.BUNDLE"</ID>
    <ID>VariableNaming:TaskerActivity.kt$TaskerActivity$val EXTRA_STRING_BLURB = "com.twofortyfouram.locale.intent.extra.BLURB"</ID>
    <ID>VariableNaming:TaskerIntegrationReceiver.kt$TaskerIntegrationReceiver$val ACTION_FIRE_SETTING = "com.twofortyfouram.locale.intent.action.FIRE_SETTING"</ID>
  </Whitelist>
</SmellBaseline>
