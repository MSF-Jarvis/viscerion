<?xml version="1.0" ?>
<SmellBaseline>
  <Blacklist></Blacklist>
  <Whitelist>
    <ID>ComplexCondition:KeyInputFilter.kt$KeyInputFilter$(dIndex + 1 &lt; Key.Format.BASE64.length &amp;&amp; isAllowed(c) || dIndex + 1 == Key.Format.BASE64.length &amp;&amp; c == '=') &amp;&amp; dLength + (sIndex - start) &lt; Key.Format.BASE64.length</ID>
    <ID>ForbiddenComment:ItemChangeListener.kt$ItemChangeListener.OnListChangedCallback$// TODO: recycle views</ID>
    <ID>LongMethod:SettingsActivity.kt$SettingsActivity.SettingsFragment$onCreatePreferences</ID>
    <ID>LongMethod:TunnelListFragment.kt$TunnelListFragment$importTunnel</ID>
    <ID>MaxLineLength:RootShell.kt$RootShell$private val preamble: String = "export CALLING_PACKAGE=${BuildConfig.APPLICATION_ID} PATH=\"$localBinaryDir:\$PATH\" TMPDIR='$localTemporaryDir'; id -u\n"</ID>
    <ID>MaxLineLength:SettingsActivity.kt$SettingsActivity.SettingsFragment$Snackbar.make(snackbarView, ctx.getString(R.string.zip_export_success, fileUri.humanReadablePath), Snackbar.LENGTH_LONG).show()</ID>
    <ID>MaxLineLength:ToolsInstaller.kt$ToolsInstaller$"cp '${File(localBinaryDir, name)}' '$destination'; chmod 755 '$destination'; chcon 'u:object_r:system_file:s0' '$destination' || true; "</ID>
    <ID>MaxLineLength:ToolsInstaller.kt$ToolsInstaller$"printf 'name=Viscerion Command Line Tools\nversion=${BuildConfig.VERSION_NAME}\nversionCode=${BuildConfig.VERSION_CODE}\nauthor=msfjarvis\ndescription=Command line tools for Viscerion\nminMagisk=1800\n' &gt; $magiskDirectory/module.prop; "</ID>
    <ID>MaxLineLength:ToolsInstaller.kt$ToolsInstaller$Timber.d(if (extract()) "Tools are now extracted into our private binary dir" else "Tools were already extracted into our private binary dir")</ID>
    <ID>ReturnCount:ErrorMessages.kt$ErrorMessages$private fun getBadConfigExceptionExplanation( resources: Resources, bce: BadConfigException ): String</ID>
    <ID>ReturnCount:MainActivity.kt$MainActivity$override fun onOptionsItemSelected(item: MenuItem): Boolean</ID>
    <ID>ReturnCount:TunnelDetailFragment.kt$TunnelDetailFragment$private fun formatBytes(bytes: Long): String?</ID>
    <ID>ThrowsCount:GoBackend.kt$GoBackend$@Throws(Exception::class) private fun setStateInternal(tunnel: Tunnel?, config: Config?, state: Tunnel.State?)</ID>
    <ID>ThrowsCount:RootShell.kt$RootShell$@Synchronized @Throws(IOException::class, NoRootException::class) fun start()</ID>
    <ID>TooManyFunctions:AppComponent.kt$AppComponent$AppComponent</ID>
    <ID>TooManyFunctions:GoBackend.kt$GoBackend$GoBackend</ID>
    <ID>TooManyFunctions:PeerProxy.kt$PeerProxy$PeerProxy</ID>
    <ID>TooManyFunctions:TunnelEditorFragment.kt$TunnelEditorFragment$TunnelEditorFragment</ID>
    <ID>TooManyFunctions:TunnelListFragment.kt$TunnelListFragment$TunnelListFragment</ID>
    <ID>TooManyFunctions:TunnelManager.kt$TunnelManager$TunnelManager</ID>
  </Whitelist>
</SmellBaseline>
